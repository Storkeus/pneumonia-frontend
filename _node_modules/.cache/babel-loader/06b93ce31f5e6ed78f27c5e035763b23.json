{"ast":null,"code":"import{createSlice}from'@reduxjs/toolkit';export var counterSlice=createSlice({name:'counter',initialState:{count:0},reducers:{increment:function increment(state){state.count+=1;},decrement:function decrement(state){state.count-=1;},incrementByAmount:function incrementByAmount(state,action){state.count+=action.payload;}}});var _counterSlice$actions=counterSlice.actions,increment=_counterSlice$actions.increment,decrement=_counterSlice$actions.decrement,incrementByAmount=_counterSlice$actions.incrementByAmount;// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\nexport{increment,decrement,incrementByAmount};export var incrementAsync=function incrementAsync(amount){return function(dispatch){setTimeout(function(){dispatch(incrementByAmount(amount));},1000);};};// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport var selectCount=function selectCount(state){return state.counter.count;};export default counterSlice.reducer;","map":{"version":3,"sources":["/mnt/x/put/praca-inzynierska/frontend/app/src/Redux/Slices/Counter.js"],"names":["createSlice","counterSlice","name","initialState","count","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","incrementAsync","amount","dispatch","setTimeout","selectCount","counter","reducer"],"mappings":"AAAA,OAASA,WAAT,KAA4B,kBAA5B,CAEA,MAAO,IAAMC,CAAAA,YAAY,CAAGD,WAAW,CAAC,CACtCE,IAAI,CAAE,SADgC,CAEtCC,YAAY,CAAE,CACZC,KAAK,CAAE,CADK,CAFwB,CAKtCC,QAAQ,CAAE,CACRC,SAAS,CAAE,mBAAAC,KAAK,CAAI,CAClBA,KAAK,CAACH,KAAN,EAAe,CAAf,CACD,CAHO,CAIRI,SAAS,CAAE,mBAAAD,KAAK,CAAI,CAClBA,KAAK,CAACH,KAAN,EAAe,CAAf,CACD,CANO,CAORK,iBAAiB,CAAE,2BAACF,KAAD,CAAQG,MAAR,CAAmB,CACpCH,KAAK,CAACH,KAAN,EAAeM,MAAM,CAACC,OAAtB,CACD,CATO,CAL4B,CAAD,CAAhC,C,0BAkBoDV,YAAY,CAACW,O,CAAzDN,S,uBAAAA,S,CAAWE,S,uBAAAA,S,CAAWC,iB,uBAAAA,iB,CAErC;AACA;AACA;AACA;8CACA,MAAO,IAAMI,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAAAC,MAAM,QAAI,UAAAC,QAAQ,CAAI,CAClDC,UAAU,CAAC,UAAM,CACfD,QAAQ,CAACN,iBAAiB,CAACK,MAAD,CAAlB,CAAR,CACD,CAFS,CAEP,IAFO,CAAV,CAGD,CAJmC,EAA7B,CAMP;AACA;AACA;AACA,MAAO,IAAMG,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAAAV,KAAK,QAAIA,CAAAA,KAAK,CAACW,OAAN,CAAcd,KAAlB,EAAzB,CAEP,cAAeH,CAAAA,YAAY,CAACkB,OAA5B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState: {\n    count: 0,\n  },\n  reducers: {\n    increment: state => {\n      state.count += 1;\n    },\n    decrement: state => {\n      state.count -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.count += action.payload;\n    },\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\nexport const incrementAsync = amount => dispatch => {\n  setTimeout(() => {\n    dispatch(incrementByAmount(amount));\n  }, 1000);\n};\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectCount = state => state.counter.count;\n\nexport default counterSlice.reducer;"]},"metadata":{},"sourceType":"module"}